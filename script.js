document.addEventListener('DOMContentLoaded', () => {

    // --- –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ ---
    const backgroundMusic = document.getElementById('background-music');
    const purrSound = document.getElementById('purr-sound');
    const musicToggleButton = document.getElementById('music-toggle');
    const catContainer = document.getElementById('cat-container');
    const cat = document.getElementById('cat');
    const navToggleButton = document.getElementById('nav-toggle-button');
    const mainNav = document.getElementById('main-nav');
    const navLinks = document.querySelectorAll('.nav-link');
    const pages = document.querySelectorAll('.page');
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–≤–µ–∑–¥–∏–π
    const constellationsContainer = document.getElementById('constellations-container');
    const modal = document.getElementById('memory-modal');
    const modalCloseButton = document.querySelector('.modal-close-button');
    const modalTitle = document.getElementById('modal-title');
    const modalDescription = document.getElementById('modal-description');

    // --- –ù–ê–°–¢–†–û–ô–ö–ò ---
    backgroundMusic.volume = 0.15;
    purrSound.volume = 1.0;

    // --- "–ú–û–ó–ì" –ö–û–¢–ê ---
    const catThoughts = [
        '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç Soul.',
        '–ú—Ä—Ä—Ä... –Ø —Ç–∞–∫ –≥–æ–ª–æ–¥–µ–Ω!',
        '–ü–æ–≥–ª–∞–¥—å –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...',
        '–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, —Ö–æ–∑—è–π–∫–∞!',
        '–ú—É—Ä-–º—É—Ä-–º—É—Ä...',
        '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –æ —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å?'
    ];

    // --- –í–ê–®–ò –ù–û–í–´–ï –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–Ø ---
    const memories = [
        {
            id: 1,
            name: "–°–æ–∑–≤–µ–∑–¥–∏–µ –ö–≤–µ—Å—Ç–∞",
            description: "–ù–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞ –∫–≤–µ—Å—Ç–µ.",
            stars: [ { x: 15, y: 25 }, { x: 20, y: 20 }, { x: 25, y: 28 }, { x: 30, y: 22 } ]
        },
        {
            id: 2,
            name: "–°–æ–∑–≤–µ–∑–¥–∏–µ –î–∏–∞–ª–æ–≥–∞",
            description: "–¢—É—Ç –º—ã —Å —Ç–æ–±–æ–π –≤–ø–µ—Ä–≤—ã–µ —Å–ø–∏—Å–∞–ª–∏—Å—å.",
            stars: [ { x: 70, y: 15 }, { x: 78, y: 18 }, { x: 85, y: 14 } ]
        },
        {
            id: 3,
            name: "–°–æ–∑–≤–µ–∑–¥–∏–µ –í–æ–ª–Ω–µ–Ω–∏—è",
            description: "–¢—É—Ç —è –æ—á–µ–Ω—å, –Ω—É –æ—á–µ–Ω—å –Ω–µ—Ä–≤–Ω–∏—á–∞–ª –ø—Ä–∏–π—Ç–∏ –∫ —Ç–µ–±–µ –≤–ø–µ—Ä–≤—ã–µ.",
            stars: [ { x: 45, y: 50 }, { x: 50, y: 55 }, { x: 55, y: 50 }, { x: 50, y: 45 }, { x: 45, y: 50 } ]
        },
        {
            id: 4,
            name: "–°–æ–∑–≤–µ–∑–¥–∏–µ '–ú–∏—Å—Ç–µ—Ä –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å'",
            description: "–¢—É—Ç —è –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–∏—à–µ–ª –∫ —Ç–µ–±–µ –∏ —Å—Ç—Ä–æ–∏–ª –∏–∑ —Å–µ–±—è –º–∏—Å—Ç–µ—Ä–∞ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å.",
            stars: [ { x: 20, y: 80 }, { x: 25, y: 80 }, { x: 30, y: 80 }, { x: 35, y: 80 } ]
        },
        {
            id: 5,
            name: "–°–æ–∑–≤–µ–∑–¥–∏–µ –ù–∞—à–µ–≥–æ –°–µ–∫—Ä–µ—Ç–∞",
            description: "–¢—É—Ç —è —É–∂–µ —Ç–≤–æ–π –ø–∞—Ä–µ–Ω—å, –Ω–æ –æ–± —ç—Ç–æ–º –∑–Ω–∞–ª–∞ —Ç–æ–ª—å–∫–æ —Ç—ã.",
            stars: [ { x: 80, y: 70 }, { x: 85, y: 75 }, { x: 90, y: 70 } ]
        },
        {
            id: 6,
            name: "–°–æ–∑–≤–µ–∑–¥–∏–µ –¢—Ä–µ—Ö –°–ª–æ–≤",
            description: "–¢—É—Ç —è, –¥—Ä–æ–∂–∞, —Å–ª–æ–≤–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π –º–∞–ª—å—á–∏–∫, –≥–æ–≤–æ—Ä—é —Ç–µ–±–µ, —á—Ç–æ —è —Ç–µ–±—è –ª—é–±–ª—é.",
            stars: [ { x: 50, y: 85 }, { x: 45, y: 90 }, { x: 55, y: 90 }, { x: 50, y: 85 } ]
        }
    ];


    // --- –§–£–ù–ö–¶–ò–ò ---

    function showCatThought() {
        const existingBubble = document.querySelector('.cat-thought-bubble');
        if (existingBubble) existingBubble.remove();
        const thoughtBubble = document.createElement('div');
        thoughtBubble.classList.add('cat-thought-bubble');
        const randomThought = catThoughts[Math.floor(Math.random() * catThoughts.length)];
        thoughtBubble.textContent = randomThought;
        catContainer.appendChild(thoughtBubble);
        setTimeout(() => { thoughtBubble.remove(); }, 5000);
    }

    // --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ó–í–ï–ó–î–ò–ô ---
    function showModal(memory) {
        modalTitle.textContent = memory.name;
        modalDescription.textContent = memory.description;
        modal.style.display = 'block';
    }

    function closeModal() {
        modal.style.display = 'none';
        const oldLines = document.querySelectorAll('.constellation-line');
        oldLines.forEach(line => line.remove());
    }
    
    function drawConstellation(memory) {
        const svgNS = "http://www.w3.org/2000/svg";
        const svg = document.createElementNS(svgNS, 'svg');
        svg.setAttribute('width', '100%');
        svg.setAttribute('height', '100%');
        svg.style.position = 'absolute';
        svg.style.top = '0';
        svg.style.left = '0';
        svg.style.zIndex = '-1';
        svg.classList.add('constellation-line'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        for (let i = 0; i < memory.stars.length - 1; i++) {
            const line = document.createElementNS(svgNS, 'line');
            line.setAttribute('x1', `${memory.stars[i].x}%`);
            line.setAttribute('y1', `${memory.stars[i].y}%`);
            line.setAttribute('x2', `${memory.stars[i+1].x}%`);
            line.setAttribute('y2', `${memory.stars[i+1].y}%`);
            svg.appendChild(line);
        }
        constellationsContainer.appendChild(svg);
    }
    
    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ---
    cat.addEventListener('click', () => {
        showCatThought();
        if (!purrSound.paused) { purrSound.pause(); } 
        else { purrSound.currentTime = 0; purrSound.play(); }
    });
    
    musicToggleButton.addEventListener('click', () => {
        if (backgroundMusic.paused) { backgroundMusic.play(); musicToggleButton.textContent = 'üéµ'; } 
        else { backgroundMusic.pause(); musicToggleButton.textContent = 'üîá'; }
    });

    navToggleButton.addEventListener('click', () => {
        mainNav.classList.toggle('show');
    });

    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = link.getAttribute('href');
            mainNav.classList.remove('show');
            navLinks.forEach(l => l.classList.remove('active'));
            pages.forEach(p => p.classList.remove('active'));
            link.classList.add('active');
            document.querySelector(targetId).classList.add('active');
        });
    });
    
    document.addEventListener('click', (e) => {
        if (!navToggleButton.contains(e.target) && !mainNav.contains(e.target)) {
            mainNav.classList.remove('show');
        }
    });

    // –°–û–ë–´–¢–ò–Ø –î–õ–Ø –°–û–ó–í–ï–ó–î–ò–ô
    memories.forEach(memory => {
        memory.stars.forEach((starCoords) => {
            const starElement = document.createElement('div');
            starElement.classList.add('star-point');
            starElement.style.left = `${starCoords.x}%`;
            starElement.style.top = `${starCoords.y}%`;
            starElement.dataset.memoryId = memory.id;
            constellationsContainer.appendChild(starElement);

            starElement.addEventListener('click', () => {
                const clickedMemory = memories.find(m => m.id === memory.id);
                const oldLines = document.querySelectorAll('.constellation-line');
                oldLines.forEach(line => line.remove());
                drawConstellation(clickedMemory);
                setTimeout(() => { showModal(clickedMemory); }, 1000);
            });
        });
    });
    
    modalCloseButton.addEventListener('click', closeModal);
    window.addEventListener('click', (event) => {
        if (event.target == modal) { closeModal(); }
    });

    // –ê–í–¢–û–í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ú–£–ó–´–ö–ò
    let musicStarted = false;
    function playMusic() {
        if (!musicStarted) {
            backgroundMusic.play().then(() => {
                musicStarted = true; musicToggleButton.textContent = 'üéµ';
            }).catch(error => { musicToggleButton.textContent = 'üîá'; });
        }
    }
    document.body.addEventListener('click', playMusic, { once: true });
});
